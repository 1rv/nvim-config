#begin/end snippet
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

#fraction
snippet f; "\frac{}{}" iA
\frac{$1}{$2}$0
endsnippet

#snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
#\\frac{`!p snip.rv = match.group(1)`}{$1}$0
#endsnippet

#priority 1000
#snippet '^.*\)/' "() Fraction" wrA
#`!p
#stripped = match.string[:-1]
#depth = 0
#i = len(stripped) - 1
#while True:
#	if stripped[i] == ')': depth += 1
#	if stripped[i] == '(': depth -= 1
#	if depth == 0: break;
#	i -= 1
#snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
#`{$1}$0
#endsnippet

snippet // "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

#fonts
priority 10
snippet bld "bold" i
\textbf{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bld" "bold" riA
\textbf{`!p snip.rv = match.group(1)`}
endsnippet

snippet itc "italicize" A
\textit{$1}$0
endsnippet

snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet -> "to" iA
\to
endsnippet

#integral with limits 
#all these shorcuts that are at risk of being expanded in word have two versions
#one where if the letter preceeding is not a leter, then expand
#one where if the letter preceeding is a letter, expand on tab
priority 10
snippet ii "\int_{} tab" i
\int_{${1:${VISUAL}}}$0
endsnippet

priority 100
snippet "([^\{i])ii" "\int_{} auto" riA
`!p snip.rv = match.group(1)`\int_{${1:${VISUAL}}}$0
endsnippet

#sum with limits
snippet ss "\sum\limits_{} tab" i
\sum_{$1}$0
endsnippet

#limits
snippet ll "limit" i
\lim_{$1}$0
endsnippet

snippet "([^a-zA-z])ll" "limit don't expand in word" riA
`!p snip.rv = match.group(1)`\lim_{$1}$0
endsnippet

snippet infll "infinity limit" iA
\lim_{$1\to\infty}$0
endsnippet

#for whatever reason, if you ned \limits for something,
snippet limt "\limit" iA
\limits_{$1}$0
endsnippet

#partial
snippet prt "partial" iA
\\frac{\partial $1}{\partial $2}$0
endsnippet

#inline math with smart detection
snippet mk "inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet mj "make brackets" iA
\\{$1\\}$0
endsnippet

snippet mss "inline brackets" iA
$\\{${1}\\}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet bk "bigg ({[|" A
\big$1 ${VISUAL} \big`!p
if t[1].startswith('g'):
	if len(t[1]) == 1:
		snip.rv = 'g'
	elif t[1][1] == '(':
		snip.rv = 'g)'
	elif t[1][1] == '{':
		snip.rv = 'g}'
	elif t[1][1] == '[':
		snip.rv = 'g]'
	elif t[1][1] == '|':
		snip.rv = 'g|'
	else:
		snip.rv = 'g'
else:
	if t[1].startswith('('):
		snip.rv = ')'
	elif t[1].startswith('{'):
		snip.rv = '}'
	elif t[1].startswith('['):
		snip.rv = ']'
	elif t[1].startswith('|'):
		snip.rv = '|'
	else:
		snip.rv = ''
` $0
endsnippet

#normal text
snippet nml "normal text" iA
\textnormal{$1} $0
endsnippet

#sub/superscripts
priority 10
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

priority 10
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sr; "^2" iA
^2
endsnippet

snippet sr' "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet invs "inverse" iA
^{-1}
endsnippet

#snippet cmpl "complement" iA
#^{c}
#endsnippet

snippet s' "superscript" iA
^{$1}$0
endsnippet

snippet s; "subscript" iA
_{$1}$0
endsnippet

#logic
snippet =- "implies" iA
\implies 
endsnippet

snippet -= "implied by" iA
\impliedby 
endsnippet

snippet === "iff" iA
\iff 
endsnippet

snippet "([^i^\\])neq" "not equal" riA
`!p snip.rv = match.group(1)`\neq 
endsnippet

snippet "([^\\])leq" "less equal" riA
`!p snip.rv = match.group(1)`\leq 
endsnippet

snippet "([^\\])geq" "greater equal" riA
`!p snip.rv = match.group(1)`\geq 
endsnippet

#conjugate
snippet bar "overbar" i
\overline{$1}$0
endsnippet

#hat
priority 10
snippet "hht" "hat" riA
\hat{${1:${VISUAL}}}$0
endsnippet

priority 100
snippet "([a-zA-Z])hht" "hat" riA
\hat{`!p snip.rv = match.group(1)`}
endsnippet

#twid
priority 10
snippet "twd" "twiddle" riA
\tilde{${1:${VISUAL}}}$0
endsnippet

priority 100
snippet "([a-zA-z])twd" "twiddle" riA
\tilde{`!p snip.rv = match.group(1)`}
endsnippet

#dot
priority 10
snippet "ddt" "dot" riA
\dot{${1:${VISUAL}}}$0
endsnippet

priority 100
snippet "([a-zA-z])ddt" "dot" riA
\dot{`!p snip.rv = match.group(1)`}
endsnippet


#bigg paren
#snippet bg "bigg ({[" A
#\bigg$1 $3 \bigg$2$0
#endsnippet

#create align/equation environments
snippet eq "Equation without a number" b
\begin{equation*}
	${1:${VISUAL:}}
\end{equation*}$0
endsnippet


snippet eqn "Equation with number" b
\begin{equation}
	${1:${VISUAL:}}
\end{equation}$0
endsnippet

snippet aln "Align" b
\begin{align}
	${1:${VISUAL:}}
\end{align}$0
endsnippet

snippet al "Align without a number" b
\begin{align*}
	${1:${VISUAL:}}
\end{align*}$0
endsnippet

#newline
snippet n; "newline" bA
\newline
$0
endsnippet

#sets
snippet RR "real numbers" iA
\mathbb{R}
endsnippet

priority 10
snippet "(\\mathbb{R})n" "auto Rn" wrA
`!p snip.rv = match.group(1)`^n
endsnippet

priority 10
snippet "(\\mathbb{R})d" "auto Rd" wrA
`!p snip.rv = match.group(1)`^d
endsnippet

snippet NN "natural numbers" iA
\mathbb{N}
endsnippet

snippet QQ "rational numbers" iA
\mathbb{Q}
endsnippet

snippet ZZ "integers" iA
\mathbb{Z}
endsnippet

snippet CC "complex numbers" iA
\mathbb{C} 
endsnippet

snippet mty "empty set" iA
\emptyset 
endsnippet

snippet inn "in" iA
\in 
endsnippet

snippet OO "infinity" iA
\infty 
endsnippet

snippet "([^0-9])00" "infinity" riA
`!p snip.rv = match.group(1)`\infty 
endsnippet

snippet sbs "subset" iA
\subset 
endsnippet

snippet sps "supset" iA
\superset 
endsnippet

#higher level lin alg
snippet <> "inner product" A
\langle$1,$2\rangle $0
endsnippet

snippet ** "star/adjoint" iA
^{*}
endsnippet

snippet Ox "otimes" iA
\otimes 
endsnippet

snippet cds "cdots" iA
\cdots 
endsnippet

snippet lds "ldots" i
\ldots 
endsnippet

snippet cd. "cdot" iA
\cdot 
endsnippet

snippet ld. "ldot" iA
\ldot 
endsnippet

#measure theory
snippet Lp "L^p" iA
L^p
endsnippet

snippet Lq "L^q" iA
L^q
endsnippet

priority 100
snippet L1 "L^1" iA
L^1
endsnippet

snippet Linf "L^{\infty}" iA
L^{\infty}
endsnippet

snippet ipi "p integral" iA
\int_{$1} |${2:${VISUAL}}|^p$0
endsnippet

priority 10
snippet nrm "norm" iA
\|${1:${VISUAL:}}\|$0
endsnippet

priority 100
snippet pnrm "norm" iA
\|${1:${VISUAL:}}\|_{p}$0
endsnippet

#template for problem/proof environmen
snippet pppp "problem and proof env" bA
\begin{problem}
	$1
\end{problem}
\begin{proof}
	$2
\end{proof} $0
endsnippet

#matrices
snippet bmx "bmatrix" bA
\begin{bmatrix}
	$1
\end{bmatrix}$0
endsnippet

snippet vmx "vmatrix" bA
\begin{vmatrix}
	$1
\end{vmatrix}$0
endsnippet

snippet pmx "pmatrix" bA
\begin{pmatrix}
	$1
\end{pmatrix}$0
endsnippet

#complex
snippet "([^a-zA-Z])ee" "e^{}" riA
`!p snip.rv = match.group(1)`e^{${1:${VISUAL:}}}$0
endsnippet

	
#greeks
snippet ;a "alpha" iA
\alpha 
endsnippet

snippet ;b "beta" iA
\beta 
endsnippet

snippet ;g "gamma" iA
\gamma 
endsnippet

snippet ;G "Gamma" iA
\Gamma 
endsnippet

snippet ;d "delta" iA
\delta 
endsnippet

snippet ;D "Delta" iA
\Delta 
endsnippet

snippet ;e "epsilon" iA
\epsilon 
endsnippet

snippet ;z "zeta" iA
\zeta 
endsnippet

#??????????
snippet ;t "theta" iA
\theta 
endsnippet

snippet ;h "eta" iA
\eta 
endsnippet

snippet ;i "iota" iA
\iota 
endsnippet

snippet ;k "kappa" iA
\kappa 
endsnippet

snippet ;l "lambda" iA
\lambda 
endsnippet

snippet ;L "Lambda" iA
\Lambda 
endsnippet

snippet ;m "mu" iA
\mu 
endsnippet

snippet ;n "nu" iA
\nu 
endsnippet

snippet ;x "xi" iA
\xi 
endsnippet

snippet ;p "pi" iA
\pi 
endsnippet

snippet ;r "rho" iA
\rho 
endsnippet

snippet ;s "sigma" iA
\sigma 
endsnippet

snippet ;S "Sigma" iA
\Sigma 
endsnippet

snippet ;f "phi" iA
\phi 
endsnippet

snippet ;F "Phi" iA
\Phi 
endsnippet

snippet ;c "chi" iA
\chi 
endsnippet

snippet ;o "omega" iA
\omega 
endsnippet

snippet ;O "Omega" iA
\Omega 
endsnippet

snippet ;y "psi" iA
\psi 
endsnippet

snippet ;Y "Psi" iA
\Psi 
endsnippet


#master template for hw assignments
snippet templ "template" bA
\documentclass[a4paper,12pt,reqno]{amsart}
\usepackage{geometry}

\geometry{letterpaper, margin=1in}

\newcommand{\classtitle}{$1}
\newcommand{\doctitle}{$2}
\newcommand{\username}{Daniel Chen}

\usepackage{fancyhdr}
\usepackage{amsmath}
\usepackage{mathrsfs}


\pagestyle{fancy}
\fancyhead{}
\lhead{\doctitle}
\rhead{\username}

\setlength{\headheight}{14.0pt}
\setlength{\footskip}{14.0pt}


\theoremstyle{definition}
\newtheorem{theorem}{Theorem}[section]
\newtheorem{problem}{Problem}
\newtheorem{lemma}{Lemma}

\title{\classtitle\;\doctitle}
\author{\username}




\begin{document}
    \maketitle
    \begin{problem}
		$3
    \end{problem}
\end{document}
endsnippet
